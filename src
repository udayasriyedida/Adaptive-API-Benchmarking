import requests
import time
import pandas as pd

# User input for the query (this could be a drug, symptom, or disease)
query = "COVID-19"

# List of Medical APIs to benchmark (replace with real API URLs and keys)
api_endpoints = {
    'Tavily': 'your_api_key'
    'SerpAPI': 'your_api_key'
    'OpenFDA': 'your_api_key'

# Function to make requests and measure performance
def benchmark_api(api_name, api_url):
    try:
        start_time = time.time()  # Record the start time
        response = requests.get(api_url)  # Send the request
        end_time = time.time()  # Record the end time

        # Measure response time
        response_time = end_time - start_time

        # Check if the API request was successful (status code 200)
        if response.status_code == 200: 
            data = response.json()

            # Adjust data quality check based on the API response structure
            if api_name == 'Tavily':
                data_quality = len(data['symptoms']) if 'symptoms' in data else 0
            elif api_name == 'SerpAPI':
                data_quality = len(data['organic_results']) if 'organic_results' in data else 0
            elif api_name == 'OpenFDA':
                data_quality = len(data['results']) if 'results' in data else 0
            else:
                data_quality = 0

            error_rate = 0  # No error if status code is 200
        else:
            data_quality = 0
            error_rate = 1  # Error occurred

        return {
            'API': api_name,
            'Response Time (s)': response_time,
            'Data Quality': data_quality,
            'Error Rate': error_rate
        }
    except Exception as e:
        # Handle any exceptions that occur (e.g., network errors)
        return {
            'API': api_name,
            'Response Time (s)': None,
            'Data Quality': None,
            'Error Rate': 1  # Mark error if exception occurs
        }

# Benchmark all APIs and collect results
benchmark_results = []
for api_name, api_url in api_endpoints.items():
    result = benchmark_api(api_name, api_url)
    benchmark_results.append(result)

# Create a DataFrame for easy visualization and manipulation
df = pd.DataFrame(benchmark_results)

# Display the benchmarking results as a table
print("Benchmark Results:")
print(df)

# Select the best API based on the lowest response time and highest data quality
# We want the API with the minimum response time and the highest data quality
best_api = df.loc[(df['Error Rate'] == 0)].sort_values(by=['Data Quality', 'Response Time (s)'], ascending=[False, True]).iloc[0]

print("\nBest API based on performance:")
print(best_api)

# Now call only the best API
best_api_name = best_api['API']
best_api_url = api_endpoints[best_api_name]

# Call the selected API
print(f"\nCalling the best API: {best_api_name}")
best_api_response = requests.get(best_api_url)

# Print the response from the best API
if best_api_response.status_code == 200:
    best_api_data = best_api_response.json()
    print("\nResponse from the best API:")
    print(best_api_data)
else:
    print(f"Failed to get a response from {best_api_name}. Status code: {best_api_response.status_code}")
